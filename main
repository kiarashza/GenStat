import torch

print(torch.__version__)


# try auto grad

x = torch.tensor([[2.0,2], [8 ,3]],requires_grad= True)
print(x)

print(x.grad)

print(x.requires_grad)

y= (x*x)
t= y.mean()

t.requires_grad_(True)
y.requires_grad_(True)

print(t, t.requires_grad)

# t.backward()

print(t.grad, y.grad, x.grad)
# x.backward()
# print(t.grad, y.grad, x.grad)
# t.zero_grad()
y.backward(torch.tensor([1.0, 1]))
print(t.grad, y.grad, x.grad)


#========================================
import torchvision
import torchvision.transforms as transforms
#
transform = transforms.Compose([transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])


train_data = torchvision.datasets.CIFAR10(root='./data', train=True, download= True, transform = transform)

trainloader = torch.utils.data.DataLoader(train_data, batch_size=4,
                                          shuffle=True, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

import matplotlib.pyplot as plt
#
import numpy as np

def imgshow(img):
    img = img / 2 + 0.5  # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


datait = iter(trainloader)
images, label = datait.next()

# show images
imgshow(torchvision.utils.make_grid(images))

import torch.nn as nn
import torch.nn.functional as F

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 5 * 5)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x

net = Net()


import torch.optim as optim

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr = .001, momentum = 0.9)

for epoch in range(10):
    run_loss =0.0
    for i, data in enumerate(trainloader, 0):#???
        input, labbel = data

        optimizer.zero_grad() #????
        t = net(input)
        loss = criterion(net(input),labbel)

        loss.backward()
        optimizer.step()

        run_loss += loss.item()
        if i % 2000 == 1999:
            print("[%d,%d] loss : %.6f" % (epoch, i, run_loss/2000))
            run_loss =0